/*
 * =====================================================================================
 *
 *       Filename:  httpd_kv_handlers.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  11/14/2018 11:24:27 AM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *   Organization:  
 *
 * =====================================================================================
 */

#include <stdlib.h>
#include <string.h>

#include "../kv/kv_helpers_internal.h"
#include "httpd_kv_handlers.h"
#include "../include_modules.h"

const kvi_handler kvi_handlers[] = {
/*
* [GENERATED]
*/
  
  {{#keys}}
  {{#integer}}
  {{#http.write}}
  {{#write_cb}}
  {
    .name = "{{caps_name}}",
    {{#nvs.key}}
    .nvs_key = "{{nvs.key}}",
    {{/nvs.key}}
    .handler = internal_set_{{name}},
  },
  {{/write_cb}}
  {{/http.write}}
  {{/integer}}
  {{/keys}}

/*
* [/GENERATED]
*/
  {
    .name = NULL,
    .handler = NULL,
  },
};

const kvi_handler *get_kvi_handler(const char *name) {
  for (int i = 0; kvi_handlers[i].name != NULL; ++i) {
    if (strcmp(kvi_handlers[i].name, name) == 0) {
      return &kvi_handlers[i];
    }
  }
  return NULL;
}

const kvs_handler kvs_handlers[] = {
/*
* [GENERATED]
*/

  {{#keys}}
  {{#string}}
  {{#http.write}}
  {{#write_cb}}
  {
    .name = "{{caps_name}}",
    {{#nvs.key}}
    .nvs_key = "{{nvs.key}}",
    {{/nvs.key}}
    .handler = internal_set_{{name}},
  },
  {{/write_cb}}
  {{/http.write}}
  {{/string}}
  {{/keys}}

/*
* [/GENERATED]
*/
  {
    .name = NULL,
    .handler = NULL,
  }
};

const kvs_handler *get_kvs_handler(const char *name) {
  for (int i = 0; kvs_handlers[i].name != NULL; ++i) {
    if (strcmp(kvs_handlers[i].name, name) == 0) {
      return &kvs_handlers[i];
    }
  }
  return NULL;
}
