/*
 * Copyright (C) 2018  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "ble_db.h"

#include "string.h"

#include "../include_modules.h"
#include "../log/log.h"
#include "ble_utils.h"
#include "../kv/kv.h"
#include "../kv/kv_helpers_internal.h"


static const uint16_t GATTS_SERVICE_UUID      = 0x00FF;

<% Object.keys(modules).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].ble.enable).forEach(f => { f = modules[m].fields[f]%>
  const uint8_t <%= f.caps_name %>_UUID[ESP_UUID_LEN_128] = <%= f.ble.uuid %>;
<% })}) %>

const esp_gatts_attr_db_t gatt_db[HRS_IDX_NB] = {
  [IDX_SVC]    =
  {{ESP_GATT_AUTO_RSP}, {ESP_UUID_LEN_16, (uint8_t *)&primary_service_uuid, ESP_GATT_PERM_READ,
    sizeof(uint16_t), sizeof(GATTS_SERVICE_UUID), (uint8_t *)&GATTS_SERVICE_UUID}},

  /*
   * [GENERATED]
   */

<% Object.keys(modules).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].ble.enable).forEach(f => { f = modules[m].fields[f]%>
    R<%= f.ble.write ? 'W' : '' %>_<%= f.type == 'integer' ? 'I' : 'STR' %><%= f.ble.notify ? '_NOTIFIABLE' : '' %>_CHAR(<%= f.caps_name %>),
<% })}) %>

  /*
   * [/GENERATED]
   */
};

void init_ble_characteristics() {
  int32_t ivalue;
  char svalue[CHAR_VAL_LEN_MAX] = {0};
  <% Object.keys(modules).forEach(m => {
    Object.keys(modules[m].fields).filter(f => modules[m].fields[f].ble.enable && !modules[m].fields[f].ble.no_sync).forEach(f => { f = modules[m].fields[f]%>
    <% if (f.type == 'integer') { %>
      ivalue = (int32_t)get_<%= f.name %>();
      set_attr_value(IDX_VALUE(<%= f.caps_name %>), (const uint8_t *)&ivalue, sizeof(int32_t));
    <% } else {%>
      get_<%= f.name %>(svalue, sizeof(svalue) - 1);
      set_attr_value(IDX_VALUE(<%= f.caps_name %>), (const uint8_t *)svalue, strlen(svalue));
    <% } %>
  <% })}) %>
}

void on_write(esp_ble_gatts_cb_param_t *param) {
  /*
   * [GENERATED]
   */
  
<% Object.keys(modules).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].ble.enable && modules[m].fields[f].ble.write).forEach((f, i) => { f = modules[m].fields[f] %>
      <%= i != 0 ? ' else ' : '' %>if (param->write.handle == handle_table[IDX_VALUE(<%= f.caps_name %>)]) {
        <% if (f.type == 'integer') { %>
          uint32_t value = *(uint32_t *)(&param->write.value[0]);
          internal_set_<%= f.name %>(value);
        <% } else { %>
          char value[MAX_KVALUE_SIZE] = {0};
          strncpy(value, (const char *)param->write.value, param->write.len);
          internal_set_<%= f.name %>(value);
        <% } %>
      }
<% })}) %>

  /*
   * [/GENERATED]
   */
}

void on_read(esp_ble_gatts_cb_param_t *param) {
}
